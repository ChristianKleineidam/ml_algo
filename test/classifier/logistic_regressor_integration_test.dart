import 'package:dart_ml/src/classifier/logistic_regression.dart';
import 'package:simd_vector/vector.dart';
import 'package:test/test.dart';

void main() {
  LogisticRegressor classifier;

  group('Logistic regressor', () {
    setUp(() {
      classifier = new LogisticRegressor(batchSize: 5, iterationLimit: 1);
    });

    test('should properly fit given data', () {
      final features = [
        new Float32x4Vector.from([5.0, 7.0, 6.0]),
        new Float32x4Vector.from([1.0, 2.0, 3.0]),
        new Float32x4Vector.from([10.0, 12.0, 31.0]),
        new Float32x4Vector.from([9.0, 8.0, 5.0]),
        new Float32x4Vector.from([4.0, 0.0, 1.0])
      ];
      final labels = new Float32x4Vector.from([0.0, 1.0, 1.0, 2.0, 0.0]);
      classifier.fit(features, labels);

      // given data
      // -----------------------------------------
      // | X (features):      | Y (class labels):|
      // ----------------------------------------|
      // | [5.0, 7.0, 6.0]    | [0.0]            |
      // | [1.0, 2.0, 3.0]    | [1.0]            |
      // | [10.0, 12.0, 31.0] | [1.0]            |
      // | [9.0, 8.0, 5.0]    | [2.0]            |
      // | [4.0, 0.0, 1.0]    | [0.0]            |
      // -----------------------------------------
      // formula for derivative:
      // sum(x_i_j * (indicator(y=1) - P(y=1|x_i,w)))
      //
      // formula for the update:
      // w_new = w_prev - eta * derivative
      //
      // initial coefficients:
      // [0.0, 0.0, 0.0]
      //
      // weights for class 0.0:
      // 5.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[5.0, 7.0, 6.0])))) - dot sign means dot product
      // 7.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[5.0, 7.0, 6.0]))))
      // 6.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[5.0, 7.0, 6.0]))))
      //
      // 2.5 3.5 3.0
      //
      // 1.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[1.0, 2.0, 3.0]))))
      // 2.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[1.0, 2.0, 3.0]))))
      // 3.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[1.0, 2.0, 3.0]))))
      //
      // -0.5 -1.0 -1.5
      //
      // 10.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[10.0, 12.0, 31.0]))))
      // 12.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[10.0, 12.0, 31.0]))))
      // 31.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[10.0, 12.0, 31.0]))))
      //
      // -5.0 -6.0 -15.5
      //
      // 9.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[9.0, 8.0, 5.0]))))
      // 8.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[9.0, 8.0, 5.0]))))
      // 5.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[9.0, 8.0, 5.0]))))
      //
      // -4.5 -4.0 -2.5
      //
      // 4.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[4.0, 0.0, 1.0]))))
      // 0.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[4.0, 0.0, 1.0]))))
      // 1.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[4.0, 0.0, 1.0]))))
      //
      // 2.0 0.0 0.5
      //
      // derivative:
      // [-5.5, -7.5, -16.0]
      //
      // update:
      // [0.0, 0.0, 0.0] - eta * [-5.5, -7.5, -16.0] = [0.0, 0.0, 0.0] - 1.0 * [-5.5, -7.5, -16.0] = [5.5, 7.5, 16.0]
      //
      // weights for class 1.0:
      // 5.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[5.0, 7.0, 6.0])))) - dot sign means dot product
      // 7.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[5.0, 7.0, 6.0]))))
      // 6.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[5.0, 7.0, 6.0]))))
      //
      // 1.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[1.0, 2.0, 3.0]))))
      // 2.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[1.0, 2.0, 3.0]))))
      // 3.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[1.0, 2.0, 3.0]))))
      //
      // 10.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[10.0, 12.0, 31.0]))))
      // 12.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[10.0, 12.0, 31.0]))))
      // 31.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[10.0, 12.0, 31.0]))))
      //
      // 9.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[9.0, 8.0, 5.0]))))
      // 8.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[9.0, 8.0, 5.0]))))
      // 5.0 * (0 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[9.0, 8.0, 5.0]))))
      //
      // 4.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[4.0, 0.0, 1.0]))))
      // 0.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[4.0, 0.0, 1.0]))))
      // 1.0 * (1 - (1 / (1 + exp(-1 * [0.0, 0.0, 0.0].[4.0, 0.0, 1.0]))))

      expect(classifier.classLabels, equals([0.0, 1.0, 2.0]));
      expect(classifier.weightsByClasses[0], equals([5.5, 7.5, 16.0]));
    });
  });
}
